import type { Metadata } from "next"
import "./globals.css"
// import { ThemeProvider } from "@/components/ThemeProvider"
import localFont from "next/font/local"
import dayjs from "dayjs"
import dayjsRelativeTime from "dayjs/plugin/relativeTime"
import dayjsLocalized from "dayjs/plugin/localizedFormat"
import dayjsTimezone from "dayjs/plugin/timezone"
import dayjsUtc from "dayjs/plugin/utc"
import localeData from "dayjs/plugin/localeData"
import "dayjs/locale/sv"
import { ToastMessageReader } from "@/components/ToastMessageReader"
import { TRPCProvider } from "@/server/trpc/client"
import { ThemeProvider } from "next-themes"
import { Toaster } from "sonner"
import { NProgress } from "@/components/NProgressProvider"

dayjs.extend(dayjsRelativeTime)
dayjs.extend(dayjsLocalized)
dayjs.extend(localeData)
dayjs.extend(dayjsUtc)
dayjs.extend(dayjsTimezone)
dayjs.locale("sv")

// const inter = Inter({ subsets: ["latin"], variable: "--font-inter" })
const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
})
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
})

// export const revalidate = 0
export const dynamic = "force-dynamic"
// export const dynamic = "force-static"

export const metadata: Metadata = {
  title: "Egg Store",
  description: "Generated by create next app",
}

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  // const cookieStore = await cookies()

  // If logged in then prefetch header content on the server to avoid flickering
  // if (cookieStore.has("uid")) {
  //   void (await Promise.all([
  //     trpc.user.getMe.prefetch(),
  //     trpc.user.getMyShoppingCartCount.prefetch(),
  //     trpc.product.getProducts.prefetch(),
  //   ]))
  // }

  return (
    <html
      lang="en"
      className={`${geistSans.variable} ${geistMono.variable}`}
      suppressHydrationWarning
    >
      <body className="flex flex-col">
        <ThemeProvider
          defaultTheme="system"
          attribute="class"
          enableSystem
          disableTransitionOnChange
        >
          <TRPCProvider>
            <NProgress>{children}</NProgress>
          </TRPCProvider>
          <Toaster />
          <ToastMessageReader />
        </ThemeProvider>
      </body>
    </html>
  )
}
